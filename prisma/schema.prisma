generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  createdOn     DateTime       @default(now())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  token         String?
  image         String?
  apps          App[] // Cascade delete
  accounts      Account[]
  sessions      Session[]
  frameworks    String[]       @default([])
  totalSpent    Int?           @default(0)
  Notification  Notification[]
  credits       Int?           @default(0)
  Token         Token[]
}

model App {
  id             String   @id @default(cuid())
  appName        String
  dateCreated    DateTime @default(now())
  apkUrl         String?
  aabUrl         String?
  appIconUrl     String?
  appDescription String?  @db.VarChar(200) // Limits to 200 characters
  webAppUrl      String?
  status         String?
  framework      String?  @db.VarChar(20)
  userId         String
  user           User     @relation(fields: [userId], references: [id]) // Foreign key to User
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id                String  @id @default(cuid())
  status            String
  description       String
  type              String
  title             String
  userId            String
  action            String
  buildNotification Boolean
  user              User    @relation(fields: [userId], references: [id]) // Foreign key to User
}

model Token {
  id     String  @id @default(cuid())
  token  String  @unique
  used   Boolean @default(false)
  userId String
  user   User    @relation(fields: [userId], references: [id])
}